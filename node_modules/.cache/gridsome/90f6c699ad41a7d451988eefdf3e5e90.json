{"remainingRequest":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/babel-loader/lib/index.js??ref--1-1!/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/gridsome/app/entry.server.js","dependencies":[{"path":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/gridsome/app/entry.server.js","mtime":499162500000},{"path":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es.function.name\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/core-js/modules/es.array.iterator.js\";\nimport \"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/core-js/modules/es.promise.js\";\nimport \"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/core-js/modules/es.object.assign.js\";\nimport \"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/core-js/modules/es.promise.finally.js\";\nimport createApp, { runMain } from './app';\nrunMain();\nvar startRoute = null;\nexport default (function (context) {\n  return new Promise(function (resolve, reject) {\n    var _createApp = createApp(),\n        app = _createApp.app,\n        router = _createApp.router;\n\n    var path = context.path,\n        location = context.location;\n    if (!startRoute) startRoute = router.history.current;else router.history.current = startRoute;\n    context.meta = app.$meta();\n    router.onError(function (err) {\n      return reject(err);\n    });\n    router.push(location, function () {\n      var matched = router.currentRoute.matched;\n\n      if (!matched.length || matched[0].name === '*') {\n        return reject(new Error(\"Could not resolve \".concat(path, \".\")));\n      }\n\n      router.history.errorCbs.pop();\n      resolve(app);\n    }, function (err) {\n      if (err) reject(err);else {\n        if (location.path === router.currentRoute.path) resolve(app);else reject(new Error(\"Route transition was aborted while generating HTML.\"));\n      }\n    });\n  });\n});",{"version":3,"sources":["/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/gridsome/app/entry.server.js"],"names":["createApp","runMain","startRoute","context","Promise","resolve","reject","app","router","path","location","history","current","meta","$meta","onError","err","push","matched","currentRoute","length","name","Error","errorCbs","pop"],"mappings":";;;;;;AAAA,OAAOA,SAAP,IAAoBC,OAApB,QAAmC,OAAnC;AAEAA,OAAO;AAEP,IAAIC,UAAU,GAAG,IAAjB;AAEA,gBAAe,UAAAC,OAAO;AAAA,SAAI,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAA,qBACjCN,SAAS,EADwB;AAAA,QACjDO,GADiD,cACjDA,GADiD;AAAA,QAC5CC,MAD4C,cAC5CA,MAD4C;;AAAA,QAEjDC,IAFiD,GAE9BN,OAF8B,CAEjDM,IAFiD;AAAA,QAE3CC,QAF2C,GAE9BP,OAF8B,CAE3CO,QAF2C;AAIzD,QAAI,CAACR,UAAL,EAAiBA,UAAU,GAAGM,MAAM,CAACG,OAAP,CAAeC,OAA5B,CAAjB,KACKJ,MAAM,CAACG,OAAP,CAAeC,OAAf,GAAyBV,UAAzB;AAELC,IAAAA,OAAO,CAACU,IAAR,GAAeN,GAAG,CAACO,KAAJ,EAAf;AAEAN,IAAAA,MAAM,CAACO,OAAP,CAAe,UAAAC,GAAG;AAAA,aAAIV,MAAM,CAACU,GAAD,CAAV;AAAA,KAAlB;AACAR,IAAAA,MAAM,CAACS,IAAP,CAAYP,QAAZ,EAAsB,YAAM;AAAA,UACFQ,OADE,GACWV,MADX,CAClBW,YADkB,CACFD,OADE;;AAG1B,UAAI,CAACA,OAAO,CAACE,MAAT,IAAmBF,OAAO,CAAC,CAAD,CAAP,CAAWG,IAAX,KAAoB,GAA3C,EAAgD;AAC9C,eAAOf,MAAM,CAAC,IAAIgB,KAAJ,6BAA+Bb,IAA/B,OAAD,CAAb;AACD;;AAEDD,MAAAA,MAAM,CAACG,OAAP,CAAeY,QAAf,CAAwBC,GAAxB;AACAnB,MAAAA,OAAO,CAACE,GAAD,CAAP;AACD,KATD,EASG,UAAAS,GAAG,EAAI;AACR,UAAIA,GAAJ,EAASV,MAAM,CAACU,GAAD,CAAN,CAAT,KACK;AACH,YAAIN,QAAQ,CAACD,IAAT,KAAkBD,MAAM,CAACW,YAAP,CAAoBV,IAA1C,EAAgDJ,OAAO,CAACE,GAAD,CAAP,CAAhD,KACKD,MAAM,CAAC,IAAIgB,KAAJ,uDAAD,CAAN;AACN;AACF,KAfD;AAgBD,GA1ByB,CAAJ;AAAA,CAAtB","sourcesContent":["import createApp, { runMain } from './app'\n\nrunMain()\n\nlet startRoute = null\n\nexport default context => new Promise((resolve, reject) => {\n  const { app, router } = createApp()\n  const { path, location } = context\n\n  if (!startRoute) startRoute = router.history.current\n  else router.history.current = startRoute\n\n  context.meta = app.$meta()\n\n  router.onError(err => reject(err))\n  router.push(location, () => {\n    const { currentRoute: { matched }} = router\n\n    if (!matched.length || matched[0].name === '*') {\n      return reject(new Error(`Could not resolve ${path}.`))\n    }\n\n    router.history.errorCbs.pop()\n    resolve(app)\n  }, err => {\n    if (err) reject(err)\n    else {\n      if (location.path === router.currentRoute.path) resolve(app)\n      else reject(new Error(`Route transition was aborted while generating HTML.`))\n    }\n  })\n})\n"]}]}
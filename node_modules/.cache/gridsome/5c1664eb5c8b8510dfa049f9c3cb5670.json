{"remainingRequest":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/babel-loader/lib/index.js??ref--1-1!/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/gridsome/app/fetchPath.js","dependencies":[{"path":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/gridsome/app/fetchPath.js","mtime":499162500000},{"path":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es.function.name\";\nimport \"core-js/modules/es.object.to-string\";\nimport fetch from './fetch';\nimport router from './router';\nimport { getResults, setResults, formatError } from './graphql/shared';\nexport default function fetchPath(path) {\n  if (process.isServer) {\n    throw new Error(\"Cannot fetch \".concat(path, \" while rendering HTML. \") + \"This method should ony be used in the mounted hook.\");\n  }\n\n  var _router$resolve = router.resolve({\n    path: path\n  }),\n      route = _router$resolve.route;\n\n  var cached = getResults(route.path);\n  var notFoundErr = new Error(\"Could not find \".concat(path));\n  return new Promise(function (resolve, reject) {\n    if (route.fullPath !== path) return reject(notFoundErr);\n    if (route.name === '*') return reject(notFoundErr);\n    if (cached) return resolve(cached);\n    fetch(route).then(function (res) {\n      if (res.code === 404) reject(notFoundErr);else resolve(setResults(route.path, res));\n    })[\"catch\"](function (err) {\n      if (err.code === 'MODULE_NOT_FOUND' || err.code === 404) {\n        reject(notFoundErr);\n      } else {\n        formatError(err, route);\n        reject(err);\n      }\n    });\n  });\n}",null]}
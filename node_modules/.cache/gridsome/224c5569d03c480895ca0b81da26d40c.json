{"remainingRequest":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/src/components/OnThisPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/src/components/OnThisPage.vue","mtime":1601735446918},{"path":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1601737131598},{"path":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/babel-loader/lib/index.js","mtime":1601737131580},{"path":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1601737131598},{"path":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/vue-loader/lib/index.js","mtime":1601737142391}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      activeAnchor: '',\r\n      observer: null\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    page() {\r\n      return this.$page.markdownPage;\r\n    },\r\n    headings() {\r\n      return this.page.headings.filter(h => h.depth > 1);\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    $route: function() {\r\n      if (process.isClient && window.location.hash) {\r\n        this.activeAnchor = window.location.hash;\r\n      }\r\n\r\n      // Clear the current observer.\r\n      this.observer.disconnect();\r\n\r\n      // And create another one for the next page.\r\n      this.$nextTick(this.initObserver);\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    observerCallback(entries, observer) {\r\n      // This early return fixes the jumping\r\n      // of the bubble active state when we click on a link.\r\n      // There should be only one intersecting element anyways.\r\n      if (entries.length > 1) {\r\n        return;\r\n      }\r\n\r\n      const id = entries[0].target.id;\r\n\r\n      // We want to give the link of the intersecting\r\n      // headline active and add the hash to the url.\r\n      if (id) {\r\n        this.activeAnchor = '#' + id;\r\n\r\n        if (history.replaceState) {\r\n          history.replaceState(null, null, '#' + id);\r\n        }\r\n      }\r\n    },\r\n\r\n    initObserver() {\r\n      this.observer = new IntersectionObserver(this.observerCallback, {\r\n        // This rootMargin should allow intersections at the top of the page.\r\n        rootMargin: '0px 0px 99999px',\r\n        threshold: 1\r\n      });\r\n\r\n      const elements = document.querySelectorAll(\r\n        '.content h2, .content h3, .content h4, .content h5, .content h6'\r\n      );\r\n\r\n      for (let i = 0; i < elements.length; i++) {\r\n        this.observer.observe(elements[i]);\r\n      }\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    if (process.isClient) {\r\n      if (window.location.hash) {\r\n        this.activeAnchor = window.location.hash;\r\n      }\r\n      this.$nextTick(this.initObserver);\r\n    }\r\n  }\r\n};\r\n",null]}
{"remainingRequest":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/babel-loader/lib/index.js??ref--1-1!/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/gridsome/app/app.js","dependencies":[{"path":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/gridsome/app/app.js","mtime":499162500000},{"path":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _createForOfIteratorHelper from \"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport Vue from 'vue';\nimport plugins from '~/.temp/plugins-server';\nimport * as main from '~/main';\nimport App from '~/App.vue';\nimport head from './head';\nimport router from './router';\nimport fetchPath from './fetchPath';\nimport { url } from './utils/helpers';\nimport graphqlGuard from './graphql/guard';\nimport graphqlMixin from './graphql/mixin';\nimport Link from './components/Link';\nimport Image from './components/Image';\nimport ClientOnly from './components/ClientOnly';\nVue.mixin(graphqlMixin);\nVue.component('GLink', Link);\nVue.component('GImage', Image);\nVue.component('ClientOnly', ClientOnly);\nVue.prototype.$url = url;\nVue.prototype.$fetch = fetchPath;\nrouter.beforeEach(graphqlGuard);\nvar context = {\n  appOptions: {\n    render: function render(h) {\n      return h(App, {\n        attrs: {\n          id: 'app'\n        }\n      });\n    },\n    metaInfo: head,\n    methods: {},\n    data: {},\n    router: router\n  },\n  isServer: process.isServer,\n  isClient: process.isClient,\n  router: router,\n  head: head\n};\nrunPlugins(plugins);\nexport function runPlugins(plugins) {\n  var _iterator = _createForOfIteratorHelper(plugins),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _step.value,\n          run = _step$value.run,\n          options = _step$value.options;\n\n      if (typeof run === 'function') {\n        run(Vue, options, context);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nexport function runMain() {\n  var defaultExport = 'default';\n\n  if (main && typeof main[defaultExport] === 'function') {\n    main[defaultExport](Vue, context);\n  }\n}\nexport default function createApp() {\n  return {\n    app: new Vue(context.appOptions),\n    router: router\n  };\n}",null]}
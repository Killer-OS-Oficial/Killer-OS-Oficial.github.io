{"remainingRequest":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/babel-loader/lib/index.js??ref--1-1!/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/gridsome/app/fetch.js","dependencies":[{"path":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/gridsome/app/fetch.js","mtime":499162500000},{"path":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.function.name\";\nimport \"core-js/modules/es.object.to-string\";\nimport prefetch from './utils/prefetch';\nimport { unslashEnd } from './utils/helpers';\nimport { NOT_FOUND_PATH } from '~/.temp/constants';\nvar dataUrl = process.env.DATA_URL;\nvar isPrefetched = {};\nvar isLoaded = {};\nexport default (function (route) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$shouldPrefet = options.shouldPrefetch,\n      shouldPrefetch = _options$shouldPrefet === void 0 ? false : _options$shouldPrefet,\n      _options$force = options.force,\n      force = _options$force === void 0 ? false : _options$force;\n\n  if (!process.isStatic) {\n    var _route$meta$dynamic = route.meta.dynamic,\n        dynamic = _route$meta$dynamic === void 0 ? false : _route$meta$dynamic;\n    var path = dynamic ? route.matched[0].path : route.path;\n\n    if (route.name === '*') {\n      path = NOT_FOUND_PATH;\n    }\n\n    return new Promise(function (resolve, reject) {\n      var onFail = function onFail(err) {\n        isLoaded[route.path] = null;\n        reject(err);\n      };\n\n      var onSuccess = function onSuccess(res) {\n        isLoaded[route.path] = null;\n        resolve(res);\n      };\n\n      if (force || !isLoaded[route.path]) {\n        isLoaded[route.path] = fetch(process.env.GRAPHQL_ENDPOINT, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            path: path,\n            dynamic: dynamic\n          })\n        }).then(function (res) {\n          return res.json();\n        });\n      }\n\n      isLoaded[route.path].then(function (res) {\n        if (res.errors) onFail(res.errors[0]);else if (res.code) onSuccess({\n          code: res.code\n        });else onSuccess({\n          data: res.data,\n          context: res.extensions ? res.extensions.context : {}\n        });\n        isLoaded[route.path] = null;\n      })[\"catch\"](onFail);\n    });\n  }\n\n  var hashMeta = document.querySelector('meta[name=\"gridsome:hash\"]').getAttribute('content');\n  return new Promise(function (resolve, reject) {\n    var usePath = route.name === '*' ? NOT_FOUND_PATH : route.path;\n    var jsonPath = route.meta.dataPath || unslashEnd(usePath) + '/index.json';\n    var absPath = unslashEnd(dataUrl) + jsonPath;\n\n    if (shouldPrefetch && !isLoaded[jsonPath]) {\n      if (!isPrefetched[jsonPath]) {\n        isPrefetched[jsonPath] = prefetch(absPath);\n      }\n\n      return isPrefetched[jsonPath].then(function () {\n        return resolve();\n      })[\"catch\"](function () {\n        return resolve();\n      });\n    }\n\n    if (!isLoaded[jsonPath]) {\n      isLoaded[jsonPath] = fetchJSON(absPath);\n    }\n\n    return isLoaded[jsonPath].then(function (res) {\n      if (res.hash !== hashMeta) {\n        reject(createError(\"Hash did not match: json=\".concat(res.hash, \", document=\").concat(hashMeta), 'INVALID_HASH'));\n      } else {\n        resolve(res);\n      }\n    })[\"catch\"](function (err) {\n      isLoaded[jsonPath] = null;\n      reject(err);\n    });\n  });\n});\n\nfunction createError(message, code) {\n  var error = new Error(message);\n  error.code = code;\n  return error;\n}\n\nfunction fetchJSON(jsonPath) {\n  return new Promise(function (resolve, reject) {\n    var req = new XMLHttpRequest();\n    req.open('GET', jsonPath, true);\n    req.withCredentials = true;\n\n    req.onload = function () {\n      switch (req.status) {\n        case 200:\n          {\n            var results;\n\n            try {\n              results = JSON.parse(req.responseText);\n            } catch (err) {\n              return reject(new Error(\"Failed to parse JSON from \".concat(jsonPath, \". \").concat(err.message, \".\")));\n            }\n\n            if (!results.hash) {\n              return reject(new Error(\"JSON data in \".concat(jsonPath, \" is missing a hash.\")));\n            }\n\n            return resolve(results);\n          }\n\n        case 404:\n          {\n            return reject(createError(req.statusText, req.status));\n          }\n      }\n\n      reject(new Error(\"Failed to fetch \".concat(jsonPath, \".\")));\n    };\n\n    req.onerror = function () {\n      reject(new Error(\"Failed to fetch \".concat(jsonPath, \".\")));\n    };\n\n    req.send(null);\n  });\n}",null]}
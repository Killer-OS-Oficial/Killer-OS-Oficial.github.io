{"remainingRequest":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/babel-loader/lib/index.js??ref--1-1!/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/gridsome/app/utils/helpers.js","dependencies":[{"path":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/gridsome/app/utils/helpers.js","mtime":499162500000},{"path":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.join\";\nimport \"core-js/modules/es.array.slice\";\nimport \"core-js/modules/es.regexp.constructor\";\nimport \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/es.string.split\";\nimport \"core-js/modules/es.string.starts-with\";\nimport _slicedToArray from \"/home/killer/Documentos/Dev/Killer-OS-Oficial.github.io/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport config from '~/.temp/config';\nvar re = new RegExp(\"^\".concat(config.pathPrefix, \"/?\"));\nexport function unslash(string) {\n  return string.replace(/^\\/+|\\/+$/g, '');\n}\nexport function unslashStart(string) {\n  return string.replace(/^\\/+/g, '');\n}\nexport function unslashEnd(string) {\n  return string.replace(/\\/+$/g, '');\n}\nexport function url() {\n  var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n  return normalizePath(\"\".concat(config.pathPrefix, \"/\").concat(string));\n}\nexport function stripPageParam(route) {\n  var path = route.path,\n      page = route.params.page;\n  var normalizedPath = unslashEnd(path);\n  var suffix = /\\/$/.test(path) ? '/' : '';\n  return page && /^\\d+$/.test(page) && /\\/\\d+$/.test(normalizedPath) ? \"\".concat(normalizedPath.split('/').slice(0, -1).join('/')).concat(suffix) || '/' : \"\".concat(normalizedPath).concat(suffix) || '/';\n}\nexport function stripPathPrefix(string) {\n  return '/' + unslashStart(string.replace(re, ''));\n}\nexport function parsePath(path) {\n  var pathname = path || '/';\n  var query = '';\n  var hash = '';\n\n  var _path$split = path.split('#');\n\n  var _path$split2 = _slicedToArray(_path$split, 2);\n\n  pathname = _path$split2[0];\n  var _path$split2$ = _path$split2[1];\n  hash = _path$split2$ === void 0 ? '' : _path$split2$;\n\n  var _pathname$split = pathname.split('?');\n\n  var _pathname$split2 = _slicedToArray(_pathname$split, 2);\n\n  pathname = _pathname$split2[0];\n  var _pathname$split2$ = _pathname$split2[1];\n  query = _pathname$split2$ === void 0 ? '' : _pathname$split2$;\n  return {\n    pathname: pathname,\n    query: query ? \"?\".concat(query) : '',\n    hash: hash ? \"#\".concat(hash) : ''\n  };\n}\nexport function normalizePath() {\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n  return \"/\".concat(path).replace(/\\/+/g, '/');\n}\nexport var isMailtoLink = function isMailtoLink(string) {\n  return String(string).startsWith('mailto:');\n};\nexport var isTelLink = function isTelLink(string) {\n  return String(string).startsWith('tel:');\n};",null]}